bestcheckpoint001.chk được train trừ dữ liệu addmor NEO, BNB, ETH, khoảng 30.000 samples, không có sampler weight. Accu là 0.467
bestcheckpoint002.chk được train trừ dữ liệu addmor NEO, BNB, ETH, khoảng 30.000 samples, có sampler weight. Accu là 0.385
bestcheckpoint003.chk được train trừ dữ liệu addmor NEO, BNB, ETH, khoảng 30.000 samples, có sampler weight. Accu là 0.391
bestcheckpoint004.chk được train trừ dữ liệu addmor NEO, BNB, ETH, khoảng 30.000 samples, turn 2 class: up and none, có sampler weight. Accu là 0.55
bestcheckpoint005.chk được train trừ dữ liệu addmor NEO, BNB, ETH, khoảng 30.000 samples, turn 2 class: down and none, có sampler weight. Accu là 0.515
bestcheckpoint006.chk được train trừ dữ liệu NEO khoảng 10.000 samples, turn 2 class: up and none, có sampler weight. Epoch 2400 Accu là 0.569.
    Tốt: precision lớp âp tính tăng cao đáng kể, Tuy nhiên recall của lớp dương tính lại thua xa các model train từ (NEO, BNB, ETH). Cho thấy cần thêm data để
    tăng độ nhận diện các mẫu dương tính.

Đang thử train với chỉ 3 indicator ["MFI", "RSI", "close"] xem thế nào

model train:

----

class SimpleCNNsb(nn.Module):
    def __init__(self, num_classes=3):
        super().__init__()

        self.ver = 'sb0'

        # First conv block
        self.conv1 = nn.Sequential(
            nn.Conv2d(1, 32, kernel_size=3, padding=1),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.Dropout2d(0.2),
            nn.MaxPool2d(2),
        )

		# Second conv block
        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.Dropout2d(0.3),
            nn.MaxPool2d(2),
        )

		# Third conv block
        self.conv3 = nn.Sequential(
			nn.Conv2d(64, 128, kernel_size=3, padding=1),
			nn.BatchNorm2d(128),
			nn.ReLU(),
			nn.Dropout2d(0.4),
			# nn.MaxPool2d(2),
		)

		# Fully connected layers
        self.fc = nn.Sequential(
            nn.Linear(128 * 4 * 4, 256),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(256, num_classes)
        )


    def forward(self,x):
       x = self.conv1(x)
       x = self.conv2(x)
       x = self.conv3(x)
       x = x.view(x.size(0), -1)  # Flatten
       x = self.fc(x)
       return x
